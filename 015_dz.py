# Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь d и два числа:
# key и value. Если ключ key есть в словаре d, то добавьте значение value в список, который хранится
# по этому ключу. Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2∗key.
# Если и ключа 2∗key нет, то нужно добавить ключ 2∗key в словарь и сопоставить ему список из переданного
# элемента [value].

def update_dictionary(d, k, v):
    if len(d) == 0:
        d[2*k] = [v]
    else:
        for key in d.keys():
            if key == k:
                d[key] += [v]
            else:
                if key == 2*k:
                    d[key] += [v]
                else:
                    d[2*k] = [v]


# Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве
# используется в этой книге.

# Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова,
# разделённые пробелом и вывести получившуюся статистику.

# Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального
# слова в этой строке число его повторений(без учёта регистра) в формате "слово количество"
# (см. пример вывода).
# Порядок вывода слов может быть произвольным, каждое уникальное слово﻿ должно выводиться только
# один раз.


# Напишите программу, которая считывает строку с числом n, которое задаёт количество чисел,
# которые нужно считать. Далее считывает n строк с числами xi, по одному числу в каждой строке.
# Итого будет n+1 строк.

# При считывании числа xi программа должна на отдельной строке вывести значение f(xi).
# Функция f(x) уже реализована и доступна для вызова.

# Функция вычисляется достаточно долго и зависит только от переданного аргумента x.
# Для того, чтобы уложиться в ограничение по времени, нужно избежать повторного вычисления значений.
